#include <HardwareSerial.h>
#include <PZEM004Tv30.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <WebServer.h>

// Wi-Fi credentials
#define WIFI_SSID "Dialog 4G 300"
#define WIFI_PASSWORD "Bhm94733"

// Firebase project credentials
#define FIREBASE_HOST "test-project-c0918-default-rtdb.asia-southeast1.firebasedatabase.app"
#define FIREBASE_AUTH "fzUuIYk2ZH2QBopjFfITCmhCxvzZ7AVYF6dl3RlX"

// Set the LCD number of columns and rows
int lcdColumns = 20;
int lcdRows = 4;

// Set LCD address, number of columns and rows
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

// Define the pins for RX and TX
#define RXD2 16
#define TXD2 17

// Initialize the PZEM with the hardware serial port and pin configuration
HardwareSerial mySerial(2);
PZEM004Tv30 pzem(&mySerial, RXD2, TXD2);

// LED pin (built-in LED)
const int ledPin = 2;

// Global variables
unsigned long startTime = 0;
bool deviceConnected = false;
float cumulativeEnergy = 0.0; // Cumulative energy in watt-seconds (Joules)
float previousEnergyWh = 0.0; // Previous energy reading in watt-hours (Wh)

// Firebase data object
FirebaseData firebaseData;
FirebaseJson json;

// Firebase configuration and authentication objects
FirebaseConfig config;
FirebaseAuth auth;

// Web server on port 80
WebServer server(80);

// Variable to store the selected equipment type
String equipmentType = "mobile";

void handleSetEquipmentType() {
  if (server.hasArg("type")) {
    equipmentType = server.arg("type");
    Serial.print("Equipment type set to: ");
    Serial.println(equipmentType);
    server.send(200, "text/plain", "Equipment type set");
  } else {
    server.send(400, "text/plain", "Bad Request");
  }
}

void setup() {
  // Initialize LCD
  lcd.init();
  // Turn on LCD backlight
  lcd.backlight();

  // Start serial communication for debugging
  Serial.begin(115200);
  Serial.println("Energy monitoring system using ESP32 and PZEM-004T");

  // Initialize the built-in LED pin as an output
  pinMode(ledPin, OUTPUT);

  // Begin serial communication with the PZEM module
  mySerial.begin(9600, SERIAL_8N1, RXD2, TXD2);

  // Blink the LED to show that the setup is complete
  blink(3, 200);

  // Connect to Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());

  // Initialize Firebase
  config.host = FIREBASE_HOST;
  config.signer.tokens.legacy_token = FIREBASE_AUTH;

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  // Setup web server route
  server.on("/setEquipmentType", handleSetEquipmentType);
  server.begin();
}

void loop() {
  static unsigned long lastLoopTime = millis();
  static unsigned long lastDurationUpdateTime = millis();//for counting error
  unsigned long currentLoopTime = millis();
  unsigned long currentDurationUpdateTime = millis();//for counting error

// Update duration every second
  if (currentDurationUpdateTime - lastDurationUpdateTime >= 1000) { // 1000ms = 1 second
    lastDurationUpdateTime = currentDurationUpdateTime;

    if (deviceIsConnected()) {
      unsigned long timeConnected = millis() - startTime;
      Serial.print("Time Connected: ");
      Serial.print(timeConnected / 1000);
      Serial.println(" seconds");

      lcd.setCursor(0, 3);
      lcd.print("Time: ");
      lcd.print(timeConnected / 1000);
      lcd.print(" sec     ");
    } else if (deviceConnected) {
      // Device was connected but now is disconnected
      deviceConnected = false;
      lcd.setCursor(0, 3);
      lcd.print("Disconnected       ");
    }
  }


  if (currentLoopTime - lastLoopTime >= 5000) { // Change the interval to 5000ms
    lastLoopTime = currentLoopTime;

    server.handleClient();

    // Read voltage from the PZEM-004T
    float voltage = pzem.voltage();

    // Check if there is an error reading voltage
    if (isnan(voltage)) {
      Serial.println("Error reading voltage");
      lcd.setCursor(0, 0);
      lcd.print("Voltage: Error     ");
    } else {
      Serial.print("Voltage: ");
      Serial.print(voltage);
      Serial.println(" V");
      lcd.setCursor(0, 0);
      lcd.print("Voltage: ");
      lcd.print(voltage);
      lcd.print(" V    ");
    }

    // Read power from the PZEM-004T
    float power = pzem.power();

    // Check if there is an error reading power
    if (isnan(power)) {
      Serial.println("Error reading power");
      lcd.setCursor(0, 1);
      lcd.print("Power: Error       ");
    } else {
      Serial.print("Power: ");
      Serial.print(power);
      Serial.println(" W");
      lcd.setCursor(0, 1);
      lcd.print("Power: ");
      lcd.print(power);
      lcd.print(" W     ");
    }

    // Read current from the PZEM-004T
    float current = pzem.current();

    // Check if there is an error reading current
    if (isnan(current)) {
      Serial.println("Error reading current");
      lcd.setCursor(0, 2);
      lcd.print("Current: Error     ");
    } else {
      Serial.print("Current: ");
      Serial.print(current);
      Serial.println(" A");
      lcd.setCursor(0, 2);
      lcd.print("Current: ");
      lcd.print(current);
      lcd.print(" A    ");
    }

    // Manually calculate energy
    static unsigned long lastTime = millis();
    unsigned long currentTime = millis();
    unsigned long elapsedTime = currentTime - lastTime;
    lastTime = currentTime;

    // Energy in watt-seconds (Joules)
    if (!isnan(power)) {
      cumulativeEnergy += (power * elapsedTime / 1000.0); // Convert power to energy
    }

    // Convert cumulative energy to watt-hours (Wh)
    float energyWh = cumulativeEnergy / 3600.0;

    // Calculate incremental energy
    float incrementalEnergyWh = energyWh - previousEnergyWh;
    previousEnergyWh = energyWh;

    // Check if the device is connected
    bool currentDeviceConnected = deviceIsConnected();

    if (currentDeviceConnected) {
      if (!deviceConnected) {
        // Device just got connected
        deviceConnected = true;
        startTime = millis(); // Update the start time
        cumulativeEnergy = 0.0; // Reset cumulative energy
        previousEnergyWh = 0.0; // Reset previous energy
      }

      // Calculate the time period the device has been connected
      unsigned long timeConnected = millis() - startTime;

      // Display the time in seconds on the serial monitor
      Serial.print("Time Connected: ");
      Serial.print(timeConnected / 1000);
      Serial.println(" seconds");

      // Display the time in seconds on the LCD
      lcd.setCursor(0, 3);
      lcd.print("Time: ");
      lcd.print(timeConnected / 1000);
      lcd.print(" sec     ");

      // Prepare data to send to Firebase
      json.set("voltage", voltage);
      json.set("current", current);
      json.set("wattage", power);
      json.set("energy", energyWh);
      json.set("incremental_energy", incrementalEnergyWh);
      // json.set("duration", timeConnected); //no need to send
      // json.set("timestamp", millis());
     // Create a nested object for timestamp
FirebaseJson timestampJson;
timestampJson.set(".sv", "timestamp");

// Add the nested timestamp object to the main JSON
json.set("timestamp", timestampJson);

      // Send data to Firebase under the selected equipment type
      if (Firebase.pushJSON(firebaseData, "/equipmentData/" + equipmentType, json)) {
        Serial.println("Data sent successfully");
      } else {
        Serial.println("Failed to send data");
        Serial.println(firebaseData.errorReason());
      }

    } else if (deviceConnected) {
      // Device was connected but now is disconnected
      deviceConnected = false;

      // Display "Disconnected" on the LCD
      lcd.setCursor(0, 3);
      lcd.print("Disconnected       ");
    }

    // Check if there is an error reading energy
    if (isnan(energyWh) || energyWh == 0.0) {
      Serial.println("Error reading energy");
      lcd.setCursor(0, 3);
      lcd.print("Energy: Error     ");
    } else {
      Serial.print("Energy: ");
      Serial.print(energyWh);
      Serial.println(" Wh");
      // lcd.setCursor(0, 3);
      // lcd.print("Energy: ");
      // lcd.print(energyWh);
      // lcd.print(" Wh    ");
    }

    // Display incremental energy
    Serial.print("Incremental Energy: ");
    Serial.print(incrementalEnergyWh);
    Serial.println(" Wh");
  
  }
}

void blink(int times, int delayTime) {
  for (int i = 0; i < times; i++) {
    digitalWrite(ledPin, HIGH); // Turn the LED on
    delay(delayTime);
    digitalWrite(ledPin, LOW);  // Turn the LED off
    delay(delayTime);
  }
}

// Function to determine if the device is connected
bool deviceIsConnected() {
  // Implement the logic to check if the device is connected
  // For example, you might check if the current is above a certain threshold
  return pzem.current() > 0.0;
}
